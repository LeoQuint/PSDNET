{
  "name": "mongodb-discuss",
  "version": "0.0.2",
  "description": "A simple discussion/forum backend built on mongodb",
  "main": "api.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha test/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Like-Falling-Leaves/mongodb-discuss.git"
  },
  "keywords": [
    "mongodb",
    "discussion",
    "discuss",
    "forum",
    "lists"
  ],
  "author": {
    "name": "Like Falling Leaves",
    "url": "http://github.com/Like-Falling-Leaves"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "lazy.js": "latest",
    "mongodb-models": "latest"
  },
  "devDependencies": {
    "mocha": "1.*"
  },
  "bugs": {
    "url": "https://github.com/Like-Falling-Leaves/mongodb-discuss/issues"
  },
  "readme": "# mongodb-discuss\n\nThis is a simple small module which implements the core features of a forum or discussion list.  This is intended to be the backend that drives a few different apps (discussions list, tasks management etc).\n\nIf you are looking for a full fledged bulletin-board functionality, I recommend looking at [NodeBB](https://nodebb.org/).  This module is meant to be simple enough to embed in other locations but also change to suit any specific needs and as such is not meant to be a complete product.\n\n[![NPM info](https://nodei.co/npm/mongodb-discuss.png?downloads=true)](https://npmjs.org/package/mongodb-discuss)\n\n[![Travis build status](https://api.travis-ci.org/Like-Falling-Leaves/mongodb-discuss.png?branch=master)](\nhttps://travis-ci.org/Like-Falling-Leaves/mongodb-discuss)\n\n## Install\n\n    npm install mongodb-disucc\n\n## Initialization\n\n```javascript\n\n   // Initialization via mongo URLs of the form: mongodb://user:password@host:port/database\n   var discuss = require('mongodb-discuss')({mongoUrl: 'mongodb://user:password@host:port/database'});\n\n```\n\n## API\n\nThis document is a work in progress.  The unit tests cover bulk of the functionality and are probably easy enough to read at this point.\n\nAll APIs are of the following form:\n\n```js\n\n   discuss.method(userId, params, done);\n````\n\n* *userId* is expected to be the ID of the caller and should always be present. \n* *params* is expected to be an object giving the parameters.  This is sanitized for mongodb-injection type security issues.\n* *done* is a regular Node-style callback to report errors as well as the JSON response.\n\nAs such, the APIs are modeled to be fairly simple to expose directly to a browser-based client for example -- with the caveat that no authorization or authentication is done by the module and that is left to the caller.\n\n### createTopic\n\nAll interactions with topics start from creating a topic.\n\n```javascript\n\n   var params = {\n     subject: \"This is the subject of the topic\",\n     body: \"This is the body of the topic\",\n     subscriberIds: [\"A list of userIds who should be subscribed to this from day one\"],\n     altTopicId: \"An alternate ID to record with this topic; cf. findTopicIdFromAltId\"\n   };\n\n   discuss.createTopic(creatorUserId, params, function (err, result) {\n     // if the call succeeds, result contains the fields topicId, subject, body and altTopicId\n   });\n\n   // if a new topic is created, in addition to a success return above,\n   // an event is generated on the discuss object.  This will happen\n   // before the callback above returns.  This can be used to send a message\n   // to the creator that the topic was created\n   discuss.once('newTopic', function (topic) { // the newly created topic data object is provided here }\n```\n\n### getSubscriptionState and setSubscriptionState\n\nThese methods allow a given user to figure out if (s)he is subscribed to a given topic.\n\n```javascript\n\n   discuss.getSubscriptionState(userId, {topicId: topicId}, function (err, result) {\n     if (!result.isSubscribed) {\n       discuss.setSubscriptionState(userId, {topicId: topicId, isSubscribed: true}, function (err) {\n       });\n     }\n   });\n\n```\n\n### postMessage\n\nThis allows a user to post a message. Note that it possible to subscribe more people to the topic at this time and also note that a user who posts is automatically added to the list of subscribers.\n\n```javascript\n\n   discuss.postMessage(userId, {topicId: topicId, body: body, subscriberIds: newSubscriberIds}, function (err) {\n     // did the post succeed?\n  });\n\n  // also, when a message is successfully posted, it might need to delivered\n  // to all users currently subscribed.  The delivery mechanism depends on the\n  // app.  So, there is an event which is fired every time a message is delivered.\n  discuss.on('mail', function (info) {\n     // info.topic is a topic object (_id, subject, body, authorId are \n     //   valid fields.\n     // info.from is the userId of the sender\n     // info.to is an array of userIds of those who were already subscribed\n     // info.addedTo is an array of userIds which got added with the message\n     // info.message is a message object (_id, authorId, topicId, body) are\n     //   valid fields\n  });\n```\n\n### getRecentTopics\n\nThis fetches all recent topics on the system or all topics created by the current user.\n\n```javascript\n\n   var params = {type: 'all'};\n   discuss.getRecentTopics(userId, params, done);\n\n   // if params.type = 'my' -- only topics created by the current user are returned.\n   // if params.type = 'subscribed' -- only topics the current user is subscribed to\n   //    are returned.\n```\n\n### getAllTopicDetails\n\nThis fetches all subscribers and messages for a topic.\n\n```javascript\n   \n   discuss.getAllTopicDetails(userId, {topicId: topicId}, function (err, info) {\n      // info has all regular topic fields (topicId, body, subject, authorId etc)\n      // in addition:\n      // info.subscriberIds = array of subscriber ids\n      // info.messages = array of message where each message has\n      //   * body, authorId, createdTime and updatedTime fields\n   });\n```\n\n### Not yet implemented\n\n* Emoji\n* Attachments\n* Likes\n* Tags",
  "_id": "mongodb-discuss@0.0.2",
  "dist": {
    "shasum": "276ec341f5ba113d3456f603057c69033289404d"
  },
  "_from": "mongodb-discuss@0.0.2",
  "_resolved": "https://registry.npmjs.org/mongodb-discuss/-/mongodb-discuss-0.0.2.tgz"
}
