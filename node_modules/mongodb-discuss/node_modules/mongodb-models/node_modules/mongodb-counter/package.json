{
  "name": "mongodb-counter",
  "description": "Auto-increment counters for MongoDB",
  "keywords": [
    "auto-increment",
    "counters",
    "counter",
    "mongodb"
  ],
  "homepage": "https://github.com/like-falling-leaves/mongodb-counter",
  "bugs": {
    "url": "https://github.com/like-falling-leaves/mongodb-counter/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Like FallingLeaves",
    "email": "likefallingleaves@gmail.com"
  },
  "main": "./counter.js",
  "maintainers": [
    {
      "name": "Like FallingLeaves",
      "email": "likefallingleaves@gmail.com"
    }
  ],
  "version": "0.0.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/like-falling-leaves/mongodb-counter.git"
  },
  "readmeFilename": "README.md",
  "dependencies": {
    "mongodb": ">=1.2.0"
  },
  "devDependencies": {
    "mocha": "1.*"
  },
  "scripts": {
    "test": "mocha test/"
  },
  "readme": "# mongodb-counter\n\nThis is a trivial mongodb auto-increment counter implementation based on [MongoDB Documentation](http://docs.mongodb.org/manual/tutorial/create-an-auto-incrementing-field/).\n\nBut this implementation requires Mongo 2.4 because it uses the $setOnInsert operation.  Unlike the sample in the documentation, this will allow creating new counters on the fly without initializing the counters to zero.\n\n[![NPM info](https://nodei.co/npm/mongodb-counter.png?downloads=true)](https://npmjs.org/package/mongodb-counter)\n\n[![Travis build status](https://api.travis-ci.org/Like-Falling-Leaves/mongodb-counter.png?branch=master)](\nhttps://travis-ci.org/Like-Falling-Leaves/mongodb-counter)\n\n## Install\n\n    npm install mongodb-counter\n\n## Initialization\n\n```javascript\n\n   // Initialization via mongo URLs of the form: mongodb://user:password@host:port/database\n   var counters = require('mongodb-counter').createCounters({mongoUrl: 'mongodb://user:password@host:port/database'});\n\n   // Specifying collection name instead of defaulting to counters collection\n   var counters = require('mongodb-counter').createCounters({\n     mongoUrl: 'mongodb://user:password@host:port/database',\n     collectionName: 'yoyo'\n   });\n\n   // Initialization via a pre-created database collection to use\n   var counters = require('mongodb-counter').createCounters({collection: db.counters});\n\n```\n\n## API\n\n```javascript\n\n   counters('requests').increment(); // increments by one, throws away the result\n   counters('requests').increment(5); // increments by 5 throws away the result\n   counters('requests').increment(5, function (err, currentCount) {\n     // currentCount is the updated count.\n   });\n\n   // increment by one and get the new value\n   counters('requests').increment(function (err, currentCount) {\n     // currentCount is the updated count.\n   });\n\n   counters('requests').decrement(); // same options with decrement\n   counters('requests').get(function (err, val) {\n     // fetch the current value\n   });\n   counters('requests').set(52); // update the value.\n\n   // if you only want to generate unique ids (for URL shortening for example),\n   // a much faster method is getNextUniqueId.  It only hits the database every 100\n   // calls.  Ofcourse, this has the side effect that the sequence is not strictly\n   // monotonically increasing in order and there could be gaps when there are crashes\n   // but uniqueness is guaranteed and the ordering will be almost monotonic.  This is\n   // suitable for a lot of cases where you just want a small unique ID.\n\n   function getShortUrl(longUrl, done) {\n     counters('requests').getNextUniqueId(function (err, uniqueId) {\n       if (err) return done(err);\n       var shortUrl = '/' + uniqueId.toString(36);\n       db.shortUrls.insert(\n         {shortUrl: '/' + uniqueId.toString(36), longUrl: longUrl},\n         function (err) { return done(err, !err && shortUrl); }\n       );\n     });\n   });\n```\n\n",
  "_id": "mongodb-counter@0.0.4",
  "dist": {
    "shasum": "75ec9c610e5848b3f217185e73efbd41d211456e"
  },
  "_from": "mongodb-counter@>0.0.3",
  "_resolved": "https://registry.npmjs.org/mongodb-counter/-/mongodb-counter-0.0.4.tgz"
}
